
var UserInfo = [];
var ProfileInfo = [];
var RInfo = [];
var Conditions = [];
var Comments = [];
let newCon =[];
var ConTermArr = [
  {
    "Term":"Commercial Entity",
    "Def":"Use by an entity in the commercial sector, whether or not that use seeks to make a financial profit.",
  },
  {
    "Term":"Geographical Area",
    "Def":"Use within specified geographic region(s).",
  },
  {
    "Term":"Regulatory Jurisdiction",
    "Def":"Use within an area defined by a shared legal framework, or subject to a common oversight organisation.",
  },
  {
    "Term":"Research Use",
    "Def":"Use for research-related exploration or innovation.",
  },
  {
    "Term":"Clinical Care Use",
    "Def":"Use for patient healthcare and related services.",
  },
  {
    "Term":"Clinical Research Use",
    "Def":"Use for research-related activities that involve human subjects where the intention is to advance medical knowledge.",
  },
  {
    "Term":"Disease Specific Use",
    "Def":"Use for research-related activities pertaining to one or more specific diseases or disease categories.",
  },
  {
    "Term":"Use As Control",
    "Def":"Use as a reference, benchmark or normal control for research or other activities.",
  },
  {
    "Term":"Profit Motivated Use",
    "Def":"Use with the intention of making profit.",
  },
  {
    "Term":"Time Period",
    "Def":"Use that has some time-frame limitation.",
  },
  {
    "Term":"Collaboration",
    "Def":"Use that involves some form of collaboration, typically with the resource provider.",
  },
  {
    "Term":"Fees",
    "Def":"Use that involves payment as a basis for the access or use.",
  },
  {
    "Term":"Return Of Results",
    "Def":"Use that involves a requirement on the recipient to return results that were intentionally generated by the planned use, to the resource provider.",
  },
  {
    "Term":"Return Of Incidental Findings",
    "Def":"Use that involves a requirement on the recipient to return results that were not intentionally generated by the planned use, to the resource provider.",
  },
  {
    "Term":"(Re-)Identification Of Individuals Without Involvement Of The Resource Provider",
    "Def":"Use of records or samples in a resource (provided in a non-identified form) in a manner that identifies or re-identifies one or more individuals, without the involvement of the resource provider.",
  },
  {
    "Term":"(Re-)Identification Of Individuals Mediated By The Resource Provider",
    "Def":"Use of records or samples in a resource (provided in a non-identified form) in a manner that identifies or re-identifies one or more individuals, mediated with the involvement of the resource provider.",
  },
  {
    "Term":"Publication Moratorium",
    "Def":"Use involves a requirement on the recipient to not publish derived results before a specific date, time period, or other condition (such as approval from the supplying institution) has been met.",
  },
  {
    "Term":"Publication",
    "Def":"Use involves a requirement on the recipient to make derived results available to the wider scientific community.",
  },
  {
    "Term":"User Authentication",
    "Def":"Use involves a requirement on the recipient to successfully undertake some form of ID proofing and authentication, prior to the access or use.",
  },
  {
    "Term":"Ethics Approval",
    "Def":"Use involves a requirement on the recipient to evidence suitable ethics board (e.g., IRB/ERB) or other intuitional or oversight body approval.",
  }
];

(function($) {
  $.fn.hasScrollBar = function() {
      return this.get(0).scrollHeight > this.height();
  }
})(jQuery);
 
var adduSum = function () {
  UserInfo.splice(0, UserInfo.length);
  $("#userinfobody").empty();
  var divElem = document.getElementById("userinformation");
  var inputElements = divElem.querySelectorAll("input, select, textarea");
  $.each(inputElements, function () {
    var input = $(this);
    var name = input.parent().find("label").text().slice(0, -1);
    var value = input.val();
    if(value.includes('<script>') || value.includes('</script>') ){
      value = '';
    }
    var item = {};
    if (name && value != "") {
      if (Array.isArray(value)) {
        item["Name"] = name;
        var v = "";
        for (var i = 0; i <= value.length; i++) {
          if (value[i] != undefined) {
            v += value[i] + " ;";
          }
        }
        item["Value"] = v.slice(0, -1);
        UserInfo.push(item);
      } else {
        item["Name"] = name;
        item["Value"] = value;
        UserInfo.push(item);
      }
    } else if (input.prop("required")) {
      $("#userinfobody").append(`
        <tr class="table-danger">
             <td class="text-left "><b>${name}</b></td>
             <td colspan ="4"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">This field is required.</td>
        </tr>
     `);
    }
  });

  // UserInfo = UserInfo.filter((e) => {
  //   return e.Name != "Profile ID";
  // });

  UserInfo.forEach(function (e) {
    $("#userinfobody").append(`
         <tr>
              <td class="text-left "><b>${e.Name}</b></td>
              <td colspan ="4"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">${e.Value}</td>
         </tr>
    `);
  });

};


var addpSum = function () {
  ProfileInfo.splice(0, ProfileInfo.length);
  $("#pinfobody").empty();
  var divElem = document.getElementById("pinformation");
  var inputElements = divElem.querySelectorAll("input, select, textarea");
  $.each(inputElements, function () {
    var input = $(this);
    var name = input.parent().find("label").text().slice(0, -1);
    var value = input.val();
    if(value.includes('<script>') || value.includes('</script>') ){
      value = '';
    }
    var item = {};
    if (name && value != "") {
      if (Array.isArray(value)) {
        item["Name"] = name;
        var v = "";
        for (var i = 0; i <= value.length; i++) {
          if (value[i] != undefined) {
            v += value[i] + " ;";
          }
        }
        item["Value"] = v.slice(0, -1);
        ProfileInfo.push(item);
      } else {
        item["Name"] = name;
        item["Value"] = value;
        ProfileInfo.push(item);
      }
    } else if (input.prop("required")) {
      $("#pinfobody").append(`
        <tr class="table-danger">
             <td class="text-left "><b>${name}</b></td>
             <td colspan ="4"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">This field is required.</td>
        </tr>
     `);
    }
  });

  // UserInfo = UserInfo.filter((e) => {
  //   return e.Name != "Profile ID";
  // });



  ProfileInfo.forEach(function (e) {
    $("#pinfobody").append(`
         <tr>
              <td class="text-left "><b>${e.Name}</b></td>
              <td colspan ="4"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">${e.Value}</td>
         </tr>
    `);
  });

  var iditem = {};
  let Id = uuidv4();
  // document.getElementById("p_id").value =Id;
  $('#p_id').val(Id);
  iditem["Name"] = "Id";
  iditem["Value"] = Id;
  ProfileInfo.push(iditem);

  let today = new Date().toISOString().substring(0, 10);
  // document.getElementById("p_date").value=today;
  var dItem = {};

  dItem["Name"] = "Date";
  dItem["Value"] = today;
  ProfileInfo.push(dItem);




};

let uuidv4 = function() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}

var addRSum = function () {

  RInfo.splice(0, RInfo.length);
  $("#datainfobody").empty();
  var divElem = document.getElementById("resource");
  var inputElements = divElem.querySelectorAll("input, select, textarea");
  $.each(inputElements, function () {
    var input = $(this);
    var name = input.parent().find("label").text().slice(0, -1);
    var value = input.val();
    if(value.includes('<script>') || value.includes('</script>') ){
      value = '';
    }
    var item = {};
    if (value != "") {
      if (Array.isArray(value)) {
        item["Name"] = name;
        var v = "";
        for (var i = 0; i <= value.length; i++) {
          if (value[i] != undefined) {
            v += value[i] + " ;";
          }
        }
        item["Value"] = v.slice(0, -1);
        RInfo.push(item);
      } else {
        item["Name"] = name;
        item["Value"] = value;
        RInfo.push(item);
      }
    } else if (input.prop("required")) {
      $("#datainfobody").append(`
              <tr class="table-danger">
                   <td class="text-left "><b>${name}</b></td>
                   <td colspan ="4"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">This field is required.</td>
              </tr>
           `);
    }
  });

  var Org = [];

  var orgs = document.getElementsByClassName("r_org");
  var or = [];
  $.each(orgs, function (r) {
    var x = orgs[r].getElementsByClassName("r_orgroup");

    $.each(x, function (y) {
      var orgItem = {};
      var litem = {}
      var i = x[y].querySelectorAll("input");
      var name = $(i[0]).val();
      var role = $(i[1]).val();


      console.log("n:"+ name)

      if (name != "" && role != "") {
        orgItem["resourceOrganisationName"] = name;
        orgItem["resourceOrganisationRole"] = role;
        or.push(orgItem);
        litem["e"] = name + "(" + role + ")";
        Org.push(litem);
      } else {
        litem["e"] = name;
        Org.push(litem);
      }
    });
  });



  RInfo.forEach(function (e) {
    $("#datainfobody").append(`
         <tr>
              <td class="text-left "><b>${e.Name}</b></td>
              <td  colspan ="4"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">${e.Value}</td>
         </tr>
      `);
  });

  if (Org.length > 0) {
   
    var Organisations = "";
    Org.forEach(function (o) {
      if (!jQuery.isEmptyObject(o)) {
        if(o.e!=""){
          Organisations += o.e + ";";
        }
        
      }
    });
    
    if(Organisations!=""){
         
      $("#datainfobody").append(`
      <tr>
           <td class="text-left "><b>Organisations</b></td>
           <td  colspan ="4"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">${Organisations}</td>
      </tr>
    
 `);

    }




    var item = {};
    item["Name"] = "Organisations";
    item["Value"] = or;
    RInfo.push(item);
  }
};


$(document).on("click", ".addorganisation", function () {
  $(this).closest(".r_org").append(` 
  <div class="r_orgroup mb-2">
  <div class="form-row">
    <div class="col-md-5 col-sm-5 col-12"><input type="text" class="form-control" placeholder="Please enter organisation name." name="org_name[]"></div>
    <div class="col-md-5 col-sm-5 col-10"><input type="text" class="form-control" placeholder="Please enter organisation role." name="org_role[]"></div>
    <div class="col-md-2 col-sm-2 col-2"><button type="button" id="removeorg" class="btn btn-small removeorg btn-danger"><i class="fas fa-minus"></i></button></div>
  </div>
  </div>
`);
});
$(document).on("click", ".removeorg", function () {
  $(this).closest(".r_orgroup").remove();
});

var addCSum = function () {

  $('#conditionbody').empty();

  
  Conditions.splice(0, Conditions.length);
  newCon.splice(0, newCon.length);
  var conDiv = document.getElementsByClassName('congroup');

  $.each(conDiv, (i) => {

    var Condition = [];
    var info = [];
    // var scon = [];
    var conInfo = conDiv[i].getElementsByClassName('conInfo');
    // var subc = conDiv[i].getElementsByClassName("subgroup");


    $.each(conInfo, function (x) {

      var inputs = conInfo[x].querySelectorAll("input, select,textarea");

      $.each(inputs, function (i) {

        var input = $(this);
        $(this).closest('span').css("background-color","");
        // var nm = input.attr('name');
        var name = input.parent().find("label").text().slice(0, -1);
        var value = input.val();
        if(value.includes('<script>') || value.includes('</script>') ){
          value = '';
        }
        var item = {};
        if (value != "") {
          if (Array.isArray(value)) {
            item["Name"] = name;
            var v = "";
            for (var i = 0; i <= value.length; i++) {
              if (value[i] != undefined) {
                v += value[i] + " ;";
              }
            }
            item["Value"] = v.slice(0, -1);
            info.push(item);
          } else {
            item["Name"] = name;
            item["Value"] = value;
            info.push(item);
          }
        } 
        // else if (input.prop("required") ) {

        //   $("#conditionbody").append(`

        //   <tr class="table-danger">
        //     <td class="text-left "><b>${name}</b></td>
        //     <td colspan ="4"  class="text-left" style="white-space:wordwrap !imortant; width:100%;">This field is required.</td>
        //   </tr>

        //   `)

        // }
      })

      Condition.push(info);

    });

    // $.each(subc,function(r){

    //   var x = subc[r].getElementsByClassName("subcongroup");
    //   $.each(x, function(i,v){
    //     var s =[];
    //     var allinput = v.querySelectorAll("input,select");
    //     $.each(allinput,function(){
    //       var input = $(this);
    //       var name = input.parent().find("label").text().slice(0, -1);
    //       var value = input.val();
    //       var item = {};
    //         if(value != ""){
    //           if (Array.isArray(value)) {
    //             item["Name"] = name;
    //             var v = "";
    //             for (var i = 0; i <= value.length; i++) {
    //               if (value[i] != undefined) {
    //                 v += value[i] + " ;";
    //               }
    //             }
    //             item["Value"] = v.slice(0, -1);
    //             s.push(item);
    //           } else {
    //             item["Name"] = name;
    //             item["Value"] = value;
    //             s.push(item);
    //           }
    //         }



    //     })

    //     scon.push(s);


    //   })

    //   Condition.push(scon);

    // })

    Conditions.push(Condition);
    // console.log(Conditions);

  });



  if (Conditions.length > 0) {

    var c = 1;

    $("#conditionbody").append(`
    <tr>
         <th class="text-center scope="col">Statement No</th>
         <th class="text-center scope="col">Use Condition</th>
         <th class="text-center  scope="col">Condition Parameter</th>
         <th class="text-center scope="col">Rule</th>
         <th class="text-center scope="col">Scope</th>
    </tr>
    `);
      

   
   
    Conditions.forEach(function(x) {
      
      let con = x[0];

      var Obj ={};

      con.forEach(function(i) {

       Obj[i.Name] = i.Value;
        
      })

      newCon.push(Obj);

    })

    
    var xyz = [];

  //   console.log(newCon)
  //   xyz= newCon.sort(function(a, b) {
      
  //     if(a["Use Condition"]!=undefined){
  //       var textA = a["Use Condition"].toUpperCase();
  //       var textB =b["Use Condition"].toUpperCase();
  //       return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
  //     }
  // });

 
  newCon.forEach(function(i) {

    var c_term = i["Use Condition"]!=undefined?i["Use Condition"]:'';
    var c_rule = i["Rule"]!=undefined?i["Rule"]:'';
    var t_detail = i["Condition Parameter"]!=undefined?i["Condition Parameter"]:'';
    var r_scope = i["Scope"]!=undefined?i["Scope"]:'';
    // var r_detail = i["Other Considerations"]!=undefined?i["Other Considerations"]:'';
    // var c_app =i["Condition Applicability"];

    let c_treq = c_term==''?'table-danger':'';
    let c_rreq = c_rule==''?'table-danger':'';
    let c_sreq = r_scope==''?'table-danger':'';

    $("#conditionbody").append(`
    <tr>
         <td colspan="1" class="text-center" style="white-space:wordwrap !imortant; width:50px;">${c}</td>
         <td class="text-left ${c_treq}" style="white-space:wordwrap !imortant; width:100%;">${c_term}</td>
         <td colspan="1" class="text-left" style="white-space:wordwrap !imortant; width:50px;">${t_detail}</td>
         <td class="text-left ${c_rreq}" style="white-space:wordwrap !imortant; width:100%;">${c_rule}</td>
         <td colspan="1" class="text-left ${c_sreq}" style="white-space:wordwrap !imortant; width:50px;">${r_scope}</td>
    </tr>
    `);

    c++;
     
   })


  }

};

var addComments = function () {
  Comments.splice(0, Comments.length);

  var tce = $("#tool_comment");
  var tce_Name = tce.parent().find("label").text().slice(0, -1);
  var tce_Value = tce.val();
  var tce_Item = {};
  tce_Item["Name"] = tce_Name;
  tce_Item["Value"] = tce_Value;

  Comments.push(tce_Item);

  // Adding CCE Comment

  var cce = $("#cce_comment");
  var cce_Name = cce.parent().find("label").text().slice(0, -1);
  var cce_Value = cce.val();
  // console.log(cce.value);
  var cce_Item = {};
  cce_Item["Name"] = cce_Name;
  cce_Item["Value"] = cce_Value;

  Comments.push(cce_Item);

}

var getUser = function () {
  return UserInfo;
}
var getJson = function () {

  var DucProfiler = [];
  DucProfiler.splice(0, DucProfiler.length);
  DucProfiler.push(UserInfo);
  DucProfiler.push(ProfileInfo);
  DucProfiler.push(RInfo);
  DucProfiler.push(Conditions);
  DucProfiler.push(Comments);

  // console.log(DucProfiler);
  return DucProfiler;
}
var validateEmail = function ($email) {
  var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
  return emailReg.test($email);
};
var is_url = function (str) {
  regexp =
    /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/;
  if (regexp.test(str)) {
    return true;
  } else {
    return false;
  }
};



var Convert_Json = function (x) {

  var JsontoDownload = [];
  _jsontoDownload = {};
  _jsontoDownload["DucProfile"]= x["profile"];
  _jsontoDownload["DucProfile"]["resources"] = x["resource"];
  _jsontoDownload["DucProfile"]["conditions"] = x["Conditions"];
  _jsontoDownload["DucProfile"]["comments"] = x["Comments"];

  JsontoDownload.push(_jsontoDownload);
  var y = JSON.stringify(JsontoDownload, null, 4);

  return y;


}
var J_Download = function (x) {

  let JsontoDownload = MakeJason(x);

  var y = JSON.stringify(JsontoDownload[0], null, 2);
  var fileName = 'Duc_Profiler.json';
  var fileToSave = new Blob([y], {
    type: 'application/json',
    name: fileName
  });
  saveAs(fileToSave, fileName);
}
var xls_Download = function (x) {

  var JsontoDownload = [];
  _jsontoDownload = {};
  _jsontoDownload["DucProfile"]= {};
  _jsontoDownload["DucProfile"]["profile"]= x["profile"];
  _jsontoDownload["DucProfile"]["resources"] = x["resource"];
  _jsontoDownload["DucProfile"]["conditions"] = x["Conditions"];
  _jsontoDownload["DucProfile"]["comments"] = x["Comments"];

  JsontoDownload.push(_jsontoDownload);
  var y = JSON.stringify(JsontoDownload, null, 4);
  ConvertToCSV(y, "DUC_Profile", true);
}

var ConvertToCSV = function (JSONData, ReportTitle, ShowLabel) {


  var arrData = typeof JSONData != 'object' ? JSON.parse(JSONData) : JSONData;
  arrData = arrData[0]["DucProfile"];
  console.log(arrData)
  
  var createXLSLFormatObj = [];
  var xlsHeader = ["Profile",  "Resource", "Conditions"];

  createXLSLFormatObj.push(xlsHeader);
  var innerRowData = [];
  var p = '';
  for (const [key, value] of Object.entries(arrData)) {
    

    if(key == "profile"){
      var p = "";
      console.log(value);
      for (const [r, rv] of Object.entries(value)) {

        if(r.startsWith("profile")){
          p = p + `${r}:${rv},`;
        }
        
      }
      p = p.slice(0, -1);
      innerRowData.push(p)
    }
    if (key == "resources") {

      var s = "";
      for (const [r, rv] of Object.entries(value[0])) {

        if (r == "resourceOrganisations") {

          var orgs = "";
          for (const [rok, rov] of Object.entries(rv)) {

            var innerObj = `${rov.resourceOrganisationName}(${rov.resourceOrganisationRole})`

            orgs = orgs + `${innerObj} ||`;
          }



          orgs = orgs.slice(0, -2);

          s = s + `resourceOrganisations: ${orgs},`

        } else {
          s = s + `${r}:${rv},`;
        }
      }

      s = s.slice(0, -1);

      innerRowData.push(s)

    } if (key == "conditions") {
      var r = '';

      for (const [k, v] of Object.entries(value)) {

        for (var [i, l] of Object.entries(v)) {

          r = r + `${i} : ${l} ,`

        }

        r = r.slice(0, -1);

        r = r + "||";
      }

      r = r.slice(0, -2);

      innerRowData.push(r);
    }
    // } if (key == "Comments") {

    //   var r = '';
    //   for (const [k, v] of Object.entries(value)) {


    //     r += `Comments Regarding DUC_Profiler: ${k}`

    //   }
    //   r = r.slice(0. - 1);

    //   innerRowData.push(r);


    // }



  }

  innerRowData = innerRowData.filter(function (value, index, arr) {

    return arr[index] != 5;
  })
  createXLSLFormatObj.push(innerRowData);


  // console.log(createXLSLFormatObj);

  /* File Name */
  var filename = "Duc_Profiles.xlsx";

  /* Sheet Name */
  var ws_name = "Duc_Profile";

  // if (typeof console !== 'undefined') console.log(new Date());
  var wb = XLSX.utils.book_new(),
    ws = XLSX.utils.aoa_to_sheet(createXLSLFormatObj);

  /* Add worksheet to workbook */
  XLSX.utils.book_append_sheet(wb, ws, ws_name);

  /* Write workbook and Download */
  XLSX.writeFile(wb, filename);
}

var IsJsonString = function (str) {
  try {
    JSON.parse(str);
  } catch (e) {
    return false;
  }
  return true;
}
var library = {};

library.json = {
  replacer: function (match, pIndent, pKey, pVal, pEnd) {
    var key = '<span class=json-key>';
    var val = '<span class=json-value>';
    var str = '<span class=json-string>';
    var r = pIndent || '';
    if (pKey)
      r = r + key + pKey.replace(/[": ]/g, '') + '</span>: ';
    if (pVal)
      r = r + (pVal[0] == '"' ? str : val) + pVal + '</span>';
    return r + (pEnd || '');
  },
  prettyPrint: function (obj) {
    var jsonLine = /^( *)("[\w]+": )?("[^"]*"|[\w.+-]*)?([,[{])?$/mg;
    return JSON.stringify(obj, null, 3)
      .replace(/&/g, '&amp;').replace(/\\"/g, '&quot;')
      .replace(/</g, '&lt;').replace(/>/g, '&gt;')
      .replace(jsonLine, library.json.replacer);
  }
};

var convertToJson = function( content ){
  console.log(content);
  var Obj = content[0][0];
  var j =[];
  var jitem = {};
  var pitem = {};

  var resources =[];

  var pro = "";
  var res = "";
  var con ="";

  var coms = [];
  var citem = {};
  citem["Comments Regarding DUC_Profiler"] = "";
  citem["Comments Regarding CCE"] = "";
  coms.push(citem);
  console.log(Obj);
  for (const [r, rv] of Object.entries(Obj)) {

    if (r == "Profile") {
      pro = rv;
    }  if (r == "Resource") {
     res = rv;
    } if (r == "Conditions") {
      con =rv;
    } 

  }
  var c =[];
  resources = formatResources(res);
  console.log(resources);
  c=formateCon(con);
  jitem["profile"] = formateProfile(pro);
  jitem["resources"] = resources;
  jitem["conditions"] = c;
  // jitem["Conditions"] = formateCon(con);
  jitem["comments"] = coms;

  j.push(jitem);
  var k = JSON.stringify(j[0], null, 2);

  console.log(k);
  return k;
  
}

var formateProfile = function(p){
  var profile = p.split(',');
  var pitem = {};
  profile.forEach(function(v){
    var vi = v.split(":");
    pitem[vi[0]] = vi[1];
  })
 return pitem;
}
var formatResources = function (r){
  var rr =[];
  var robj ={};
  var res = r.split(",")

  res.forEach(function(v){
    
    var vi = v.split(":");

    if(vi[0] == 'resourceOrganisations'){

      robj['resourceOrganisations'] = formateOrgd(vi[1]);

    }else{
       
      robj[vi[0]] = vi[1];

    }

  })

  // console.log(robj);

  // if(r.includes(',')){
      
  //    var res = r.split(",");
  //    res.forEach(function(v){
  //      var vi = v.split(":");
  //      robj[vi[0]] = vi[1];
  //    })
  // }else{
   
  //   var vi = r.split(":");
  //   robj[vi[0]] = vi[1];

  // }

rr.push(robj);
return rr;

}

var formateOrgd = function(orgs){

  var orgsarr =[];
  if(orgs.includes("||")){

    let Ors = orgs.split('||');
    Ors.forEach(function(o){
     orgsarr.push(converOrgs(o))
    })
  }
  else{

    orgsarr.push(converOrgs(orgs))
  }
   
  return orgsarr;
}

var converOrgs = function(orgs){

 var newStr = orgs.replace(')', '');
 var item = {};
 var  or = newStr.split("(");

 item["resourceOrganisationName"] = or[0].trim();
 item["resourceOrganisationRole"] = or[1].trim();

 return item;
  
}

var formateCon = function(con){
  var Conditions = [];

  if(con.includes("||")){

    let cons = con.split("||");

    cons.forEach(function(v){

      Conditions.push(converCons(v));

    })

  }else{

    Conditions.push(converCons(con));

  }

  return Conditions;
}

var converCons = function(con){

  var item = {};

  var cons = con.split(",");

  
  cons.forEach(function(v){

    var vi = v.split(":");

    item[vi[0].trim()] = vi[1].trim();

  })

 return item;

}

var alterJson = function (json) {

  var d = JSON.parse(json);
  let [first] = Object.keys(d)

  if (first == "profile") {
    // alert("old JSON ")

    return json;
  } else if (first == "DucProfile") {
    var j = [];
    var jitem = {};

    var pitem = {};
    // alert("I am here")
    // console.log(d.DucProfile.profileName);

    pitem["profileName"] = d.DucProfile.profileName;
    if (d.DucProfile.profileVersion) {
      pitem["profileVersion"] = d.DucProfile.profileVersion;
    }
    pitem["profileID"] = d.DucProfile.profileId;
    pitem["profileCreateDate"] = d.DucProfile.creationDate;


    jitem["profile"] = pitem;
    jitem["resources"] = d.DucProfile.resources;
    jitem["conditions"] = d.DucProfile.conditions;
    jitem["comments"] = d.DucProfile.comments;

    j.push(jitem);
    var k = JSON.stringify(j[0], null, 2);

    return k;

  }


}



